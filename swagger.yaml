openapi: 3.0.3
info:
  title: Plant Friend API
  description: |-
    This is the Plant Friend API definition.
    
    Some useful links:
    - [The API definition yaml file](https://github.com/MarcellHarmaci/plantfriend-swagger-ui/blob/master/swagger.yaml)
    - [Use the Swagger Editor to edit the API](https://editor-next.swagger.io/?url=https://raw.githubusercontent.com/MarcellHarmaci/plantfriend-swagger-ui/refs/heads/master/swagger.yaml)
    - [Backend in Spring Boot implementing the API](https://github.com/MarcellHarmaci/plantfriend-spring)
    - TODO: Front-ends connected to the backend through the API...
  contact:
    email: harmaci.marci@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
tags:
  - name: plant
    description: Operations regarding plants
  - name: user
    description: Operations regarding users
paths:
  /plants:
    get:
      tags:
        - plant
      summary: Read all saved plants
      operationId: getPlants
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
  /plant:
    post:
      tags:
        - plant
      summary: Create a new plant
      operationId: addPlant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantData'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /plant/{id}:
    get:
      tags:
        - plant
      summary: Read plant by id
      description: Returns a single plant
      operationId: getPlantById
      parameters:
        - name: id
          in: path
          description: ID of plant to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '400':
          description: Invalid ID supplied
        '404':
          description: Plant not found
    put:
      tags:
        - plant
      summary: Update a plant by id
      description: ''
      operationId: updatePlantById
      parameters:
        - name: id
          in: path
          description: ID of plant to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantData'
        required: true
      responses:
        '200':
          description: Plant successfully updated. The new state is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '400':
          description: Invalid input
        '404':
          description: No plant found with given id
    delete:
      tags:
        - plant
      summary: Delete a plant by id
      operationId: deletePlantById
      parameters:
        - name: id
          in: path
          description: Plant id to delete
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: No plant found with given id
        '405':
          description: The requested plant is already deleted

  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
components:
  schemas:
    PlantData:
      description: A plant's data without an id
      required:
        - name
      type: object
      properties:
        name:
          type: string
          example: "Read one chapter"
    Plant:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 123
        name:
          type: string
          example: "Read one chapter"
  requestBodies:
    PlantBody:
      description: Plant object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PlantData'
    